::: CHASM Grammar Specifications :::

<IntConst>      ::= [1-9][0-9]*     // Will be parsed as 64-bit.
<HexConst>      ::= 0x[A-Fa-f0-9]+  
<BitConst>      ::= 0b[01]+
<FltConst>      ::= [0-9]+(\.[0-9]+)?f
<ChrConst>      ::= '.'

<IntegralConst> ::= <IntConst> 
                  | <HexConst> 
                  | <BitConst> 
                  | <ChrConst>

<Const>         ::= <IntegralConst>
                  | <FltConst>

// ID's are lower precedence than keywords.
<ID>        ::= [a-zA-Z_][a-zA-Z_0-9]*

<PrimType>  ::= int | flt | idx | chr 

<ArrType>   ::= arr\<<Type>, <IntegralConst>\>
              | arr\<<Type>, \?\>

<RecField>  ::= <Type> <ID>;
<RecType>   ::= rec \{ <RecField>+ \}

<VAddrType> ::= @<Type>
<PAddrType> ::= *<Type>

<TypeList>  ::= (<Type> (, <Type>)*)?
<FuncType>  ::= fun \(<TypeList>\) =\> <Type>

<Type>  ::= <PrimType>
          | <ArrType>
          | <RecType>
          | <VAddrType>
          | <PAddrType>
          | <FuncType>

// Time to redefine Value paths!!!!
// Yay.

<ValuePath>     ::= <ID>(\.<ID>)*

// For an instruction, only one array index or physical address.
// dereference is allowed.

<ArrValueIndex> ::= <ValuePath>\[(<ValuePath>|<IntegralConst>)\]
<PAddrDeRef>    ::= <ValuePath>\-\><ID>
             

<Declaration>   ::= <Type> <ID>;
<StaticDef>     ::= <Type> <ID> $ <Const>;
<DynamicDef>    ::= <Type> <ID> $ new <Type>;
<AssignDef>     ::= <Type> <ID> $ <ID>;



